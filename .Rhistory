fit_b_2()
hist(rnorm(n,1) + sample(c(rep(1,n/2),rep(-1,n/2))))
hist(rnorm(n,1) + sample(c(rep(1,n/2),rep(-1,n/2))), bins=30)
?his
? hist
hist(rnorm(n,1) + sample(c(rep(1,n/2),rep(-1,n/2))), breaks=30)
hist(rnorm(n,1) + sample(c(rep(1,n/2),rep(-1,n/2))), breaks=20)
hist(rnorm(n,0.5) + sample(c(rep(1,n/2),rep(-1,n/2))), breaks=20)
hist(rnorm(n,0.2) + sample(c(rep(1,n/2),rep(-1,n/2))), breaks=20)
hist(rnorm(n,0.01) + sample(c(rep(1,n/2),rep(-1,n/2))), breaks=20)
hist(sample(c(rep(1,n/2),rep(-1,n/2))), breaks=20)
hist(rnorm(n,0,1) + sample(c(rep(1,n/2),rep(-1,n/2))), breaks=20)
hist(rnorm(n,0,0.5) + sample(c(rep(1,n/2),rep(-1,n/2))), breaks=20)
hist(rnorm(n,0,0.5) + sample(c(rep(1,n/2),rep(-1,n/2))), breaks=20)
fit_b_2 <- \() {
noise <- rnorm(n,0,0.5) + sample(c(rep(1,n/2),rep(-1,n/2)))
data <- tibble(x = x, y = y0 + noise)
fit <- stan_glm(y ~ x, data = data, refresh = 0)
list(b = coef(fit)[2], se = se(fit)[2])
}
fit_b_2()
b_fits <- rep(0,1000)
b_se <- rep(0,1000)
for(i in seq_along(b_fits))
{
res <- fit_b_2()
b_fits[[i]] <- res$b
b_se[[i]] <- res$se
}
sum(abs(b_fits - b) <= 2*b_se)
draws <- as_tibble(fit_b_2())
draws <- as_tibble(fit_b_2())
ggplot(data = draws, aes(x=b)) +hist()
draws <- as_tibble(fit_b_2())
ggplot(data = draws, aes(x=b)) + geom_hist()
geom_hist
draws <- as_tibble(fit_b_2())
ggplot(data = draws, aes(x=b)) + geom_histogram()
View(draws)
noise <- rnorm(n,0,0.5) + sample(c(rep(1,n/2),rep(-1,n/2)))
data <- tibble(x = x, y = y0 + noise)
fit <- stan_glm(y ~ x, data = data, refresh = 0)
draws <- as_tibble(fit)
ggplot(data = draws, aes(x=b)) + geom_histogram()
noise <- rnorm(n,0,0.5) + sample(c(rep(1,n/2),rep(-1,n/2)))
data <- tibble(x = x, y = y0 + noise)
fit <- stan_glm(y ~ x, data = data, refresh = 0)
draws <- as_tibble(fit)
ggplot(data = draws, aes(x=x)) + geom_histogram()
x <- seq(1,100)
x1 <- seq(1,100)
x2 <- rbinom(1,100,.05)
x1 <- seq(1,100)
x2 <- rbinom(100,1,.5)
x1 <- seq(1,100)
x2 <- rbinom(100,1,.5)
y_t <- 3 + 0.1*x1 + 0.5*x2
? rt
hist(5*rt(100,4))
hist(5*rt(100,4))
hist(5*rt(100,4))
hist(5*rt(100,4))
sd(5*rt(100,4))
sd(rt(100,4))
sqrt(2)
sd(rt(100,4))
sim_dat <- \(){
x1 <- seq(1,100)
x2 <- rbinom(100,1,.5)
y_t <- 3 + 0.1*x1 + 0.5*x2
tibble(x1,x2,y = y_t + 5*rt(100, 4))
}
fit <- stan_glm(y ~ x1 + x1, data = sim_dat())
sim_dat <- \(){
x1 <- seq(1,100)
x2 <- rbinom(100,1,.5)
y_t <- 3 + 0.1*x1 + 0.5*x2
tibble(x1,x2,y = y_t + 5*rt(100, 4))
}
fit <- stan_glm(y ~ x1 + x1, data = sim_dat(), refresh = 0)
print(fit)
sim_dat <- \(){
x1 <- seq(1,100)
x2 <- rbinom(100,1,.5)
y_t <- 3 + 0.1*x1 + 0.5*x2
tibble(x1,x2,y = y_t + 5*rt(100, 4))
}
fit <- stan_glm(y ~ x1 + x2, data = sim_dat(), refresh = 0)
print(fit)
set.seed(42)
sim_dat <- \(){
x1 <- seq(1,100)
x2 <- rbinom(100,1,.5)
y_t <- 3 + 0.1*x1 + 0.5*x2
tibble(x1,x2,y = y_t + 5*rt(100, 4))
}
fit <- stan_glm(y ~ x1 + x2, data = sim_dat(), refresh = 0)
print(fit)
set.seed(33)
sim_dat <- \(){
x1 <- seq(1,100)
x2 <- rbinom(100,1,.5)
y_t <- 3 + 0.1*x1 + 0.5*x2
tibble(x1,x2,y = y_t + 5*rt(100, 4))
}
fit <- stan_glm(y ~ x1 + x2, data = sim_dat(), refresh = 0)
print(fit)
set.seed(33)
sim_dat <- \(){
x1 <- seq(1,100)
x2 <- rbinom(100,1,.5)
y_t <- 3 + 0.1*x1 + 0.5*x2
tibble(x1,x2,y = y_t + 5*rt(100, 4))
}
fit <- stan_glm(y ~ x1 + x2, data = sim_dat(), refresh = 0)
print(fit, digits = 3)
4>5
n_sims = 10
cov_int = rep(0,n_sims)
cov_x1 = rep(0,n_sims)
cov_x2 = rep(0,n_sims)
for(i in seq(1:n_sims)){
fit <- stan_glm(y ~ x1 + x2, data = sim_dat(), refresh = 0)
coefs <- coef(fit)
ses <- se(fit)
cov_int[[i]] = abs(coefs[1]-3) <= se[1]
cov_x1[[i]] = abs(coefs[2]-3) <= se[2]
cov_x2[[i]] = abs(coefs[3]-3) <= se[3]
}
n_sims = 10
cov_int = rep(0,n_sims)
cov_x1 = rep(0,n_sims)
cov_x2 = rep(0,n_sims)
for(i in seq(1:n_sims)){
fit <- stan_glm(y ~ x1 + x2, data = sim_dat(), refresh = 0)
coefs <- coef(fit)
ses <- se(fit)
cov_int[[i]] = abs(coefs[1]-3) <= ses[1]
cov_x1[[i]] = abs(coefs[2]-3) <= ses[2]
cov_x2[[i]] = abs(coefs[3]-3) <= ses[3]
}
c(mean(cov_int), mean(cov_x1), mean(cov_x2))
n_sims = 10
cov_int = rep(0,n_sims)
cov_x1 = rep(0,n_sims)
cov_x2 = rep(0,n_sims)
for(i in seq(1:n_sims)){
fit <- stan_glm(y ~ x1 + x2, data = sim_dat(), refresh = 0)
coefs <- coef(fit)
ses <- se(fit)
cov_int[[i]] = abs(coefs[1] - 3) <= ses[1]
cov_x1[[i]] = abs(coefs[2] - 0.1) <= ses[2]
cov_x2[[i]] = abs(coefs[3] - 0.5) <= ses[3]
}
c(mean(cov_int), mean(cov_x1), mean(cov_x2))
n_sims = 100
cov_int = rep(0,n_sims)
cov_x1 = rep(0,n_sims)
cov_x2 = rep(0,n_sims)
for(i in seq(1:n_sims)){
fit <- stan_glm(y ~ x1 + x2, data = sim_dat(), refresh = 0)
coefs <- coef(fit)
ses <- se(fit)
cov_int[[i]] = abs(coefs[1] - 3) <= ses[1]
cov_x1[[i]] = abs(coefs[2] - 0.1) <= ses[2]
cov_x2[[i]] = abs(coefs[3] - 0.5) <= ses[3]
}
c(mean(cov_int), mean(cov_x1), mean(cov_x2))
n_sims = 1000
cov_int = rep(0,n_sims)
cov_x1 = rep(0,n_sims)
cov_x2 = rep(0,n_sims)
for(i in seq(1:n_sims)){
fit <- stan_glm(y ~ x1 + x2, data = sim_dat(), refresh = 0)
coefs <- coef(fit)
ses <- se(fit)
cov_int[[i]] = abs(coefs[1] - 3) <= ses[1]
cov_x1[[i]] = abs(coefs[2] - 0.1) <= ses[2]
cov_x2[[i]] = abs(coefs[3] - 0.5) <= ses[3]
}
c(mean(cov_int), mean(cov_x1), mean(cov_x2))
library(tidyverse)
library(rstanarm)
library(ggplot2)
beauty <- read.csv(root("../Examples/Beauty/data","beauty.csv"))
beauty <- read.csv("../Examples/Beauty/data/beauty.csv")
setwd("~/dataSciDev/ROS/ROSWork")
beauty <- read.csv("../Examples/Beauty/data/beauty.csv")
beauty <- read.csv("../Ros-Examples/Beauty/data/beauty.csv")
head(beauty)
par(mar=c(3,3,1,1), mgp=c(1.7, .5, 0), tck=-.01)
plot(beauty$beauty, beauty$eval)
read_csv
beauty <- read_csv("../Ros-Examples/Beauty/data/beauty.csv")
head(beauty)
? read_csv2
beauty <- read_csv("../Ros-Examples/Beauty/data/beauty.csv", col_types = "nnfifffi")
head(beauty)
describe(beauty)
summary(beauty)
beauty <- read_csv("../Ros-Examples/Beauty/data/beauty.csv", col_types = "nnfiffff")
head(beauty)
summary(beauty)
ggplot(data = beauty) + geom_line(mapping = aes(x= beauty, y= eval, color = female))
ggplot(data = beauty) + geom_point(mapping = aes(x= beauty, y= eval, color = female))
fit_all <- stan_glm(eval ~ beauty*female + age + minority + nonenglish + lower, data = beauty, refresh=0)
print(fit_all)
fit_all <- stan_glm(eval ~ beauty*female + age + minority + nonenglish + lower + course_id, data = beauty, refresh=0)
print(fit_all)
fit_all <- stan_glm(eval ~ beauty*female + age + minority + nonenglish + lower , data = beauty, refresh=0)
print(fit_all)
fit_1 <- stan_glm(eval ~ beauty + female , data = beauty, refresh=0)
print(fit_1)
fit_2 <- stan_glm(eval ~ beauty * female , data = beauty, refresh=0)
print(fit_2)
fit_3 <- stan_glm(eval ~ beauty * female + nonenglish, data = beauty, refresh=0)
print(fit_3)
fit_3 <- stan_glm(eval ~ beauty + female + nonenglish, data = beauty, refresh=0)
print(fit_3)
list(loo(fit_all), loo(fit_1), loo(fit_2), loo(fit_3))
loo(fit_all)
fit_1 <- stan_glm(eval ~ beauty + female , data = beauty, refresh=0)
print(fit_1)
loo(fit_1)
loo(fit_2)
loo(fit_3)
loo_compare(fit_all, fit_3)
fit_all
fit_3
? loo_compare
loo_compare(fit_2, fit_3)
loo(fit_3)
loo_compare(loo(fit_all), loo(fit_3))
loo3= loo(fit_3)
print(loo3)
loo_all <- loo(fit_all)
print(loo_all)
loo_compare(loo_all, loo3)
loo_compare(c(loo_all, loo3))
loo_compare(loo_all, loo3)
loo3
loo_all
loo3 <- loo(fit_2)
loo2 <- loo(fit_2)
print(loo2)
loo1 <- loo(fit_1)
print(loo1)
loo3= loo(fit_3)
print(loo3)
loo_compare(loo_all, loo3, loo2, loo1)
y_point_pred <- predict(fit_3)
b_with_pred = copy(beauty)
? copy
b_with_pred = beauty
b_with_pred$y_point_pred <- predict(fit_3)
b_with_pred = beauty
b_with_pred$y_point_pred <- predict(fit_3)
ggplot(data = b_with_pred) + geom_point(x=y_point_red, y = eval )
b_with_pred = beauty
b_with_pred$y_point_pred <- predict(fit_3)
ggplot(data = b_with_pred) + geom_point(x=y_point_pred, y = eval )
eval
b_with_pred = beauty
b_with_pred$y_point_pred <- predict(fit_3)
ggplot(data = b_with_pred) + geom_point(x=y_point_pred, y = "eval" )
b_with_pred = beauty
b_with_pred$y_point_pred <- predict(fit_3)
ggplot(data = b_with_pred) + geom_point(x=y_point_pred, y = b_with_pred$eval )
b_with_pred = beauty
b_with_pred$y_point_pred <- predict(fit_3)
ggplot(data = b_with_pred) + geom_point(aes(x=y_point_pred, y =  eval ))
b_with_pred = beauty
b_with_pred$eval_point_pred <- predict(fit_3)
ggplot(data = b_with_pred) + geom_point(aes(x=eval_point_pred, y =  eval )) + geom_abline(slope =1, intercept =0, color = red)
b_with_pred = beauty
b_with_pred$eval_point_pred <- predict(fit_3)
ggplot(data = b_with_pred) + geom_point(aes(x=eval_point_pred, y =  eval )) + geom_abline(slope =1, intercept =0, color = "red")
b_with_pred = beauty
b_with_pred$eval_point_pred <- predict(fit_3)
ggplot(data = b_with_pred) + geom_point(aes(x=eval_point_pred -eval, y =  eval )) + geom_abline(slope =1, intercept =0, color = "red")
b_with_pred = beauty
b_with_pred$eval_point_pred <- predict(fit_3)
ggplot(data = b_with_pred) + geom_point(aes(x=eval_point_pred, y =  eval- eval_point_pred )) + geom_abline(slope =0, intercept =0, color = "red")
b_with_pred = beauty
b_with_pred$eval_point_pred <- predict(fit_3)
ggplot(data = b_with_pred) + geom_point(aes(x=eval_point_pred, y =  eval- eval_point_pred, color = female)) + geom_abline(slope =0, intercept =0, color = "red")
ggplot(data = b_with_pred) + geom_point(aes(x=beauty, y =  eval, color = female)) + geom_line(aes(x=beauty, y = eval_point_pred, color = female))
? sort
b_with_pred = beauty |> arrange(beauty)
b_with_pred$eval_point_pred <- predict(fit_3)
ggplot(data = b_with_pred) + geom_point(aes(x=eval_point_pred, y =  eval- eval_point_pred, color = female)) + geom_abline(slope =0, intercept =0, color = "red")
ggplot(data = b_with_pred) + geom_point(aes(x=beauty, y =  eval, color = female)) + geom_line(aes(x=beauty, y = eval_point_pred, color = female))
? sample
length(beauty)
nrow(beauty)
1:n
1:10
folds = 5
n <- nrow(beauty)
sample(1:n, n/folds, replace = FALSE)
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
shuffled_index[1:n/5]
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
shuffled_index
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
shuffled_index[[1:5]]
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
shuffled_index[[1]]
n/5
shuffled_index[1:10]
shuffled_index[1:33]
shuffled_index[1:n/5]
shuffled_index[1:floor(n/5)]
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
for(i in 1:folds)
{
print(i)
}
beauty(-(1:100))
beauty[-(1:100)]
beauty[-(1:100),]
nrow(beauty)
beauty[-(1:460),]
tail(beauty)
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
start = 1
for(i in 1:folds)
{
end = start + floor(n/5)
data <- beauty[-(start:end),]
#fit_1 <- stan_glm(eval ~ beauty + female , data = data, refresh=0)
#fit_3 <- stan_glm(eval ~ beauty + female + nonenglish , data = data, refresh=0)
start = end + 1
}
length(beauty)
nrow(beauty)
1:3
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
start = 1
for(i in 1:folds)
{
end = start + floor(n/5) - 1
data <- beauty[-(start:end),]
#fit_1 <- stan_glm(eval ~ beauty + female , data = data, refresh=0)
#fit_3 <- stan_glm(eval ~ beauty + female + nonenglish , data = data, refresh=0)
start = end + 1
}
floor(n/5)*4
floor(n/5)*5
n
fit_3
predict(fit_3) - beauty$eval
sum((predict(fit_3) - beauty$eval)^2)
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
residuals_1 <- rep(0,5)
residuals_3 <- rep(0,5)
start = 1
for(i in 1:folds)
{
end = start + floor(n/5) - 1
data <- beauty[-(start:end),]
fit_1 <- stan_glm(eval ~ beauty + female , data = data, refresh=0)
residuals_1[[i]] <- sum((predict(fit_1) - beauty$eval)^2)
fit_3 <- stan_glm(eval ~ beauty + female + nonenglish , data = data, refresh=0)
residuals_3[[i]] <- sum((predict(fit_3) - beauty$eval)^2)
start = end + 1
}
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
residuals_1 <- rep(0,5)
residuals_3 <- rep(0,5)
start = 1
for(i in 1:folds)
{
end = start + floor(n/5) - 1
data <- beauty[-(start:end),]
fit_1 <- stan_glm(eval ~ beauty + female , data = data, refresh=0)
residuals_1[[i]] <- sum((predict(fit_1) - data$eval)^2)
fit_3 <- stan_glm(eval ~ beauty + female + nonenglish , data = data, refresh=0)
residuals_3[[i]] <- sum((predict(fit_3) - data$eval)^2)
start = end + 1
}
print(sum(residuals_1))
print(sum(residuals_3))
print(mean(residuals_1))
print(mean(residuals_3))
sd(residuals_3)
sqrt(sd(residuals_3)^2 + sd(residuals_1)^2)
sqrt(sd(residuals_3)^2/5 + sd(residuals_1)^2/5)
ceil(n/5)
ceiling(n/4)
ceiling(n/5)*5
ceiling(n/5)
floor(n/5)
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
residuals_1 <- rep(0,5)
residuals_3 <- rep(0,5)
start = 1
for(i in 1:folds)
{
end = start + ceiling(n/5) - 1
data <- beauty[-(start:end),]
fit_1 <- stan_glm(eval ~ beauty + female , data = data, refresh=0)
residuals_1[[i]] <- sum((predict(fit_1) - data$eval)^2)
fit_3 <- stan_glm(eval ~ beauty + female + nonenglish , data = data, refresh=0)
residuals_3[[i]] <- sum((predict(fit_3) - data$eval)^2)
start = end + 1
}
print(mean(residuals_1))
print(mean(residuals_3))
sqrt(sd(residuals_3)^2/5 + sd(residuals_1)^2/5)
end
nrow(beauty)
beauty[-(400:465)]
beauty[-(400:465),]
beauty[-(2:465),]
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
residuals_1 <- rep(0,5)
residuals_3 <- rep(0,5)
start = 1
for(i in 1:folds)
{
end = start + ceiling(n/5) - 1
data <- beauty[-(start:end),]
print(paste0("Fold ",i, ", length", nrow(data)))
fit_1 <- stan_glm(eval ~ beauty + female , data = data, refresh=0)
residuals_1[[i]] <- sum((predict(fit_1) - data$eval)^2)
fit_3 <- stan_glm(eval ~ beauty + female + nonenglish , data = data, refresh=0)
residuals_3[[i]] <- sum((predict(fit_3) - data$eval)^2)
start = end + 1
}
round(2.1)
round(n/5
)
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
residuals_1 <- rep(0,5)
residuals_3 <- rep(0,5)
start = 1
for(i in 1:folds)
{
end = start + round(n/5) - 1
data <- beauty[-(start:end),]
print(paste0("Fold ",i, ", length", nrow(data)))
fit_1 <- stan_glm(eval ~ beauty + female , data = data, refresh=0)
residuals_1[[i]] <- sum((predict(fit_1) - data$eval)^2)
fit_3 <- stan_glm(eval ~ beauty + female + nonenglish , data = data, refresh=0)
residuals_3[[i]] <- sum((predict(fit_3) - data$eval)^2)
start = end + 1
}
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
residuals_1 <- rep(0,5)
residuals_3 <- rep(0,5)
start = 1
for(i in 1:folds)
{
end = start + n/5 - 1
data <- beauty[-(start:round(end)),]
print(paste0("Fold ",i, ", length", nrow(data)))
fit_1 <- stan_glm(eval ~ beauty + female , data = data, refresh=0)
residuals_1[[i]] <- sum((predict(fit_1) - data$eval)^2)
fit_3 <- stan_glm(eval ~ beauty + female + nonenglish , data = data, refresh=0)
residuals_3[[i]] <- sum((predict(fit_3) - data$eval)^2)
start = round(end) + 1
}
folds = 5
n <- nrow(beauty)
shuffled_index <- sample(1:n, n, replace = FALSE)
residuals_1 <- rep(0,5)
residuals_3 <- rep(0,5)
start = 1
for(i in 1:folds)
{
end = start + n/5 - 1
data <- beauty[-(round(start):round(end)),]
print(paste0("Fold ",i, ", length", nrow(data)))
fit_1 <- stan_glm(eval ~ beauty + female , data = data, refresh=0)
residuals_1[[i]] <- sum((predict(fit_1) - data$eval)^2)
fit_3 <- stan_glm(eval ~ beauty + female + nonenglish , data = data, refresh=0)
residuals_3[[i]] <- sum((predict(fit_3) - data$eval)^2)
start = end + 1
}
print(mean(residuals_1))
print(mean(residuals_3))
sqrt(sd(residuals_3)^2/5 + sd(residuals_1)^2/5)
