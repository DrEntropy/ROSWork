(1-pnorm(2.5))*2
(1-pnorm(1))*2
? env
library(rlang)
test_env <- env(parent = test_env)
library(rlang)
test_env <- env()
test_env$loop <- test_env
View(test_env)
env1 <-env()
env2 <-env(dedoop = env1)
env1$loop <- env1
View(env1)
View(env2)
View(env1)
env1 <-env()
env2 <-env(dedoop = env1)
env1$loop <- env2
View(env1)
test <- list(a = 1, b = 2)
test
test[c("a","b")]
? env_poke
? stop
env_poke_5 <- function(env = caller_env(), nm, value){
if(env_has(nm))
stop('name exists')
env_poke(env,nm,value)
}
? where
where <- function(name, env = caller_env(), env_vec = c()) {
if (identical(env, empty_env())) {
# Base case
env_vec
} else if (env_has(env, name)) {
# Success case
where(name, env, c(env, env_vec))
} else {
# Recursive case
where(name, env_parent(env), env_vec)
}
}
where("yyy")
library(rlang)
test_env <- env()
test_env$loop <- test_env
where <- function(name, env = caller_env(), env_vec = c()) {
if (identical(env, empty_env())) {
# Base case
env_vec
} else if (env_has(env, name)) {
# Success case
where(name, env, c(env, env_vec))
} else {
# Recursive case
where(name, env_parent(env), env_vec)
}
}
where <- function(name, env = caller_env(), env_vec = c()) {
if (identical(env, empty_env())) {
# Base case
env_vec
} else if (env_has(env, name)) {
# Success case
where(name, env, c(env, env_vec))
} else {
# Recursive case
where(name, env_parent(env), env_vec)
}
}
where("yyy")
c()
where <- function(name, env = caller_env(), env_vec = c()) {
if (identical(env, empty_env())) {
# Base case
env_vec
} else if (env_has(env, name)) {
# Success case
where(name, env, c(env, env_vec))
} else {
# Recursive case
where(name, env_parent(env), env_vec)
}
}
where("where")
where <- function(name, env = caller_env(), env_vec = c()) {
if (identical(env, empty_env())) {
# Base case
env_vec
} else if (env_has(env, name)) {
# Success case
where(name, env_parent(env), c(env, env_vec))
} else {
# Recursive case
where(name, env_parent(env), env_vec)
}
}
where("where")
where <- function(name, env = caller_env(), env_list = c()) {
if (identical(env, empty_env())) {
# Base case
env_vec
} else if (env_has(env, name)) {
# Success case
where(name, env_parent(env), c(env, env_list))
} else {
# Recursive case
where(name, env_parent(env), env_list)
}
}
where("where")
where <- function(name, env = caller_env(), env_list = c()) {
if (identical(env, empty_env())) {
# Base case
env_list
} else if (env_has(env, name)) {
# Success case
where(name, env_parent(env), c(env, env_list))
} else {
# Recursive case
where(name, env_parent(env), env_list)
}
}
where("where")
where <- function(name, env = caller_env()) {
if (identical(env, empty_env())) {
# Base case
NULL
} else if (env_has(env, name)) {
# Success case
c(where(name, env_parent(env)), env)
} else {
# Recursive case
where(name, env_parent(env))
}
}
where("where")
where <- function(name, env = caller_env()) {
if (identical(env, empty_env())) {
# Base case
NULL
} else if (env_has(env, name)) {
# Success case
c(where(name, env_parent(env)), env)
} else {
# Recursive case
where(name, env_parent(env))
}
}
where("where")
env2 = env( stop = "test")
where("stop", env2)
where <- function(name, env = caller_env()) {
if (identical(env, empty_env())) {
# Base case
NULL
} else if (env_has(env, name)) {
# Success case
c(where(name, env_parent(env)), env)
} else {
# Recursive case
where(name, env_parent(env))
}
}
env2 = env( stop = "test")
where("stop", env2)
env_has(empty_env(), "ss")
FALSE && TRUE
! FALSE
? is.function
?is_function
fget <- function(name, env = caller_env(), inherits= TRUE) {
if (env_has(env, name) && is_function(env_get(env,name))) {
env
} else {
# Recursive case
if(inherits && !identical(env, empty_env()))
where(name, env_parent(env))
else
stop("Funcion not found", name, call.= FALSE)
}
}
fget <- function(name, env = caller_env(), inherits= TRUE) {
if (env_has(env, name) && is_function(env_get(env,name))) {
env
} else {
# Recursive case
if(inherits && !identical(env, empty_env()))
where(name, env_parent(env))
else
stop("Funcion not found", name, call.= FALSE)
}
}
fget("where")
fget <- function(name, env = caller_env(), inherits= TRUE) {
if (env_has(env, name) && is_function(env_get(env,name))) {
env
} else {
# Recursive case
if(inherits && !identical(env, empty_env()))
where(name, env_parent(env))
else
stop("Funcion not found", name, call.= FALSE)
}
}
fget("wher")
fget <- function(name, env = caller_env(), inherits= TRUE) {
if (env_has(env, name) && is_function(env_get(env,name))) {
env
} else {
# Recursive case
if(inherits && !identical(env, empty_env()))
where(name, env_parent(env))
else
stop("Funcion not found", name, call.= FALSE)
}
}
fget("wherw")
fget <- function(name, env = caller_env(), inherits= TRUE) {
if (env_has(env, name) && is_function(env_get(env,name))) {
env
} else {
# Recursive case
if(inherits && !identical(env, empty_env()))
fget(name, env_parent(env))
else
stop("Funcion not found", name, call.= FALSE)
}
}
fget("wherw")
fget <- function(name, env = caller_env(), inherits= TRUE) {
if (env_has(env, name) && is_function(env_get(env,name))) {
env
} else {
# Recursive case
if(inherits && !identical(env, empty_env()))
fget(name, env_parent(env))
else
stop("Funcion not found: ", name, call.= FALSE)
}
}
fget("where")
fget <- function(name, env = caller_env(), inherits= TRUE) {
if (env_has(env, name) && is_function(env_get(env,name))) {
env
} else {
# Recursive case
if(inherits && !identical(env, empty_env()))
fget(name, env_parent(env))
else
stop("Funcion not found: ", name, call.= FALSE)
}
}
fget("stop", env2)
? search_envs
search_envs()
env_parents(global_env())
?str
str(where)
?ls
ls()
env_print()
test_call_env <- function()
{
env_names(caller_env())
}
test_call_env <- function()
{
env_names(caller_env())
}
test_call_env()
library(tidyverse)
p_x_unnorm <- c(1,1/2,1/3,1/4)
p_x = p_x_unnorm/sum(p_x_unnorm)
p_x
p_X_unnorm <- c(1,1/2,1/3,1/4)
p_X = p_X_unnorm/sum(p_x_unnorm)
p_X
ggplot2(data = tibble(k=1:4, p_X), aes(x = k, y= p_x)) + geom_bar()
ggplot(data = tibble(k=1:4, p_X), aes(x = k, y= p_x)) + geom_bar()
ggplot(data = tibble(k=1:4, p_X), aes(x = k, y= p_X)) + geom_bar()
ggplot(data = tibble(k=1:4, p_X), aes( y= p_X)) + geom_bar()
ggplot(data = tibble(k=1:4, p_X), aes( x= p_X)) + geom_bar()
ggplot(data = tibble(k=1:4, p_X), aes( x=k, y= p_X)) + geom_bar()
tibble(k=1:4, p_X)
ggplot(data = tibble(k=1:4, p_X), aes( x=k, y= p_X)) + geom_bar(stat = identity)
ggplot(data = tibble(k=1:4, p_X), aes( x=k, y= p_X)) + geom_bar(stat = "identity")
p_X_unnorm <- c(1,1/2,1/4,1/8)
p_X = p_X_unnorm/sum(p_x_unnorm)
p_X
p_X_unnorm <- c(1,1/2,1/4,1/8)
p_X = p_X_unnorm/sum(p_X_unnorm)
p_X
ggplot(data = tibble(k=1:4, p_X), aes( x=k, y= p_X)) + geom_bar(stat = "identity")
1/2^2
p_X_unnorm <- c(1,1/2,1/2^2,1/2^3)
p_X = p_X_unnorm/sum(p_X_unnorm)
p_X
p_X_unnorm <- c(1,1/2,1/2^3,1/2^6)
p_X = p_X_unnorm/sum(p_X_unnorm)
p_X
ggplot(data = tibble(k=1:4, p_X), aes( x=k, y= p_X)) + geom_bar(stat = "identity")
library(tidyverse)
dice_rolls <- tibble(die1= 1:6, die2 = 1:6) |>
mutate(abs_diff = abs(die2-di1))
dice_rolls <- tibble(die1= 1:6, die2 = 1:6) |>
mutate(abs_diff = abs(die2-die1))
View(dice_rolls)
?rep
rep(1:6,6)
dice_rolls <- tibble(die1= rep(1:6,6), die2 = cumsum(die1==1) |>
mutate(abs_diff = abs(die2-die1))
dice_rolls <- tibble(die1= rep(1:6,6), die2 = cumsum(die1==1)) |>
mutate(abs_diff = abs(die2-die1))
0+1+ 4+ 9+16=25
0+1+ 4+ 9+16+25
0+1+2+3+4+5
0+1+2+3+4+5
15/6
55/6
sqrt(55/6 -2.5^2)
1/2+1/4+1/3^2+1/4^2
1-0.9236111
1-(1/2+1/4+1/3^2+1/4^2)
test = 1:100
test
1/2^test
p= 1/2^test
sum(p)
sum(p*test)
sum(p*test^2)
1/2^3
1/0.125
sum(p*test^2)
sum(p*test)
test^2
test
p
sum(p)
die_rolls <- tibble(die1 = rep(1:6,6), die2 = cumsum(die1==1), diff  = abs(die2-die1))
die_rolls
die_rolls <- tibble(die1 = rep(1:6,6), die2 = cumsum(die1==1), diff  = abs(die2-die1)) |>
group_by(diff) |> summarize(count= count())
die_rolls <- tibble(die1 = rep(1:6,6), die2 = cumsum(die1==1), diff  = abs(die2-die1)) |>
group_by(diff) |> summarize(count= count(die1))
die_rolls <- tibble(die1 = rep(1:6,6), die2 = cumsum(die1==1), diff  = abs(die2-die1)) |>
group_by(diff) |> summarize(count= count(diff))
? count
die_rolls <- tibble(die1 = rep(1:6,6), die2 = cumsum(die1==1), diff  = abs(die2-die1)) |>
group_by(diff) |> count()
die_rolls <- tibble(die1 = rep(1:6,6), die2 = cumsum(die1==1), diff  = abs(die2-die1))
die_rolls |> group_by(diff) |> count()
die_rolls <- tibble(die1 = rep(1:6,6), die2 = cumsum(die1==1), diff  = abs(die2-die1))
pmf <- die_rolls |> group_by(diff) |> count()
die_rolls <- tibble(die1 = rep(1:6,6), die2 = cumsum(die1==1), diff  = abs(die2-die1))
pmf <- die_rolls |> group_by(diff) |> count()
pmf
sum(pmf)
sum(pmf$n)
die_rolls <- tibble(die1 = rep(1:6,6), die2 = cumsum(die1==1), diff  = abs(die2-die1))
pmf <- die_rolls |> group_by(diff) |> count() |> mutate(p = n/36)
pmf
ggplot(data =pmf, aes( x=diff, y= p)) + geom_bar(stat = "identity")
6+10+6
6+10+8
24/36
?mean
E_X <- sum(pmf$x*pmf&diff)
E_X <- sum(pmf$x*pmf$diff)
E_X
pmf$x
E_X <- sum(pmf$p*pmf$diff)
E_X
E_X <- sum(pmf$p*pmf$diff)
E_X2 <- sum(pmf$p*pmf$diff^2)
c(E_X, sqrt(E_X2 - E_X^2))
35/18
E_X <- sum(pmf$p*pmf$diff)
E_X2 <- sum(pmf$p*pmf$diff^2)
c(E_X, E_X2 - E_X^2)
665/324
fact(3)
factorial(3)
factorial(0)
runif()
runif(1_
runif(1)
?poisson
rpois
lambda = 1.4
sim_x <- rpois(10000,lambda)
mean(1/(sim_x+1))
lambda = 1.4
sim_x <- rpois(10000,lambda)
mean(1/(sim_x+1))
(1-exp(-lambda))/lambda
lambda = 2
sim_x <- rpois(10000,lambda)
mean(1/(sim_x+1))
(1-exp(-lambda))/lambda
0:4
.3^(0:4)
lambda <- 5
mu <- 1
prob_more_4 <- \(n) {
alpha <- lambda/(n*mu)
k <- 0:4
1 - sum(alpha^k / factorial(k)) exp(-alpha)
lambda <- 5
mu <- 1
prob_more_4 <- \(n) {
alpha <- lambda/(n*mu)
k <- 0:4
1 - sum(alpha^k / factorial(k))*exp(-alpha)
}
tibble(n = 1:10, p = prob_more_4(n))
library(tidyverse)
lambda <- 5
mu <- 1
prob_more_4 <- \(n) {
alpha <- lambda/(n*mu)
k <- 0:4
1 - sum(alpha^k / factorial(k))*exp(-alpha)
}
tibble(n = 1:10, p = prob_more_4(n))
prob_more_4(3)
lambda <- 5
mu <- 1
prob_more_4 <- \(n) {
alpha <- lambda/(n*mu)
k <- 0:4
1 - sum(alpha^k / factorial(k))*exp(-alpha)
}
tibble(n = 1:10) |> rowwise() |> mutate(p = prob_more_r(n))
lambda <- 5
mu <- 1
prob_more_4 <- \(n) {
alpha <- lambda/(n*mu)
k <- 0:4
1 - sum(alpha^k / factorial(k))*exp(-alpha)
}
tibble(n = 1:10) |> rowwise() |> mutate(p = prob_more_4(n))
lambda <- 5
mu <- 1
prob_more_4 <- \(n) {
alpha <- lambda/(n*mu)
k <- 0:4
1 - sum(alpha^k / factorial(k))*exp(-alpha)
}
tibble(n = 1:5) |> rowwise() |> mutate(p = prob_more_4(n))
? dpois
dpois(10,10)
dpois(10,100)
ppois(10,1)
dpois(10,1)
ppois(10,1)
ppois(1,1)
ppois(0,1)
ppois(-1,1)
setwd("~/dataSciDev/ROS/ROSWork")
sds <- seq(.001,.020, .001)
sds <- seq(.001,.020, .001)
ratios <- sds^2*23/expected_sd^2
p_est <- mean(girls)
girls <- as.numeric(readr::read_lines('girls.dat', skip=1))
sample_sd<-sd(girls)
sample_sd
p_est <- mean(girls)
n_births <- 3900
expected_sd <- sqrt(p_est*(1-p_est)/n_births)
expected_sd
sds <- seq(.001,.020, .001)
ratios <- sds^2*23/expected_sd^2
sds <- seq(.001,.020, .001)
ratios <- sds^2*23/expected_sd^2
dist<- dchisq(ratios,23)
sds <- seq(.001,.020, .001)
ratios <- sds^2*23/expected_sd^2
dist<- dchisq(ratios,23)
plot(sds,dist)
sds <- seq(.003,.015, .001)
ratios <- sds^2*23/expected_sd^2
dist<- dchisq(ratios,23)
plot(sds,dist)
sds <- seq(.003,.015, .0002)
ratios <- sds^2*23/expected_sd^2
dist<- dchisq(ratios,23)
plot(sds,dist)
sds <- seq(.003,.015, .0002)
ratios <- sds^2*23/expected_sd^2
dist<- dchisq(ratios,23)
plot(sds,dist, type='l')
p_hat <- 2/(50+4)
se <- sqrt(p_hat*(1-p_hat)/50)
c(p_hat-2*se,p_hat+2*se)
? env_bin
? env_bind
?block
list(a=2,a=4)
test <- list(a=2, a=4)
test
test$a
test[[1]]
test[[2]]
?list
60/100 -.25
(60/100 -.25)*4/3
.467+(1-.467)/4
sqrt(1/4*3/4*(1-.467)*100)
sqrt(1/4*3/4*/((1-.467)*100)
sqrt(1/4*3/4/((1-.467)*100))
sqrt(1/4*3/4/((1-.467)*100))
